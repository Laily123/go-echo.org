<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recipes on Go/Golang 框架 Echo 文档</title>
    <link>http://echo.laily.net/recipes/</link>
    <description>Recent content in Recipes on Go/Golang 框架 Echo 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="http://echo.laily.net/recipes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CORS</title>
      <link>http://echo.laily.net/recipes/cors</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/cors</guid>
      <description>

&lt;h2 id=&#34;cors-示例&#34;&gt;CORS 示例&lt;/h2&gt;

&lt;h3 id=&#34;服务端&#34;&gt;服务端&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/cors/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;中间件&#34;&gt;中间件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CRUD</title>
      <link>http://echo.laily.net/recipes/crud</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/crud</guid>
      <description>

&lt;h2 id=&#34;crud-示例&#34;&gt;CRUD 示例&lt;/h2&gt;

&lt;h3 id=&#34;服务端&#34;&gt;服务端&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/crud/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;客户端&#34;&gt;客户端&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;创建-user&#34;&gt;创建 User&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X POST \
  -H &#39;Content-Type: application/json&#39; \
  -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;Joe Smith&amp;quot;}&#39; \
  localhost:1323/users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;name&amp;quot;: &amp;quot;Joe Smith&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;获取-user&#34;&gt;获取 User&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl localhost:1323/users/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;name&amp;quot;: &amp;quot;Joe Smith&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;更新-user&#34;&gt;更新 User&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X PUT \
  -H &#39;Content-Type: application/json&#39; \
  -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;Joe&amp;quot;}&#39; \
  localhost:1323/users/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;name&amp;quot;: &amp;quot;Joe&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;删除-user&#34;&gt;删除 User&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X DELETE localhost:1323/users/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NoContent - 204&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;维护者&#34;&gt;维护者&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embed Resources</title>
      <link>http://echo.laily.net/recipes/embed-resources</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/embed-resources</guid>
      <description>

&lt;h2 id=&#34;embed-resources-recipe&#34;&gt;Embed Resources Recipe&lt;/h2&gt;

&lt;h3 id=&#34;with-go-rice&#34;&gt;With go.rice&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/embed-resources/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/caarlos0&#34;&gt;caarlos0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/maddie&#34;&gt;maddie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>File Upload</title>
      <link>http://echo.laily.net/recipes/file-upload</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/file-upload</guid>
      <description>

&lt;h2 id=&#34;file-upload-recipe&#34;&gt;File Upload Recipe&lt;/h2&gt;

&lt;h3 id=&#34;how-to-upload-single-file-with-fields&#34;&gt;How to upload single file with fields?&lt;/h3&gt;

&lt;h4 id=&#34;server&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/single/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h4 id=&#34;client&#34;&gt;Client&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/single/public/index.html&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;how-to-upload-multiple-files-with-fields&#34;&gt;How to upload multiple files with fields?&lt;/h3&gt;

&lt;h4 id=&#34;server-1&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/multiple/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h4 id=&#34;client-1&#34;&gt;Client&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/multiple/public/index.html&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code&#34;&gt;Source Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/file-upload/single
&#34;&gt;single&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/file-upload/multiple
&#34;&gt;multiple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Google App Engine</title>
      <link>http://echo.laily.net/recipes/google-app-engine</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/google-app-engine</guid>
      <description>

&lt;h2 id=&#34;google-app-engine-recipe&#34;&gt;Google App Engine Recipe&lt;/h2&gt;

&lt;p&gt;Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic)
through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo
works great with all of these but requires a few changes to the usual examples to run on the
AppEngine Classic and Managed VM options. With a small amount of effort though it&amp;rsquo;s possible
to produce a codebase that will run on these and also non-managed platforms automatically.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll walk through the changes needed to support each option.&lt;/p&gt;

&lt;h3 id=&#34;standalone&#34;&gt;Standalone&lt;/h3&gt;

&lt;p&gt;Wait? What? I thought this was about AppEngine! Bear with me - the easiest way to show the changes
required is to start with a setup for standalone and work from there plus there&amp;rsquo;s no reason we
wouldn&amp;rsquo;t want to retain the ability to run our app anywhere, right?&lt;/p&gt;

&lt;p&gt;We take advantage of the go &lt;a href=&#34;http://golang.org/pkg/go/build/&#34;&gt;build constraints or tags&lt;/a&gt; to change
how we create and run the Echo server for each platform while keeping the rest of the application
(e.g. handler wireup) the same across all of them.&lt;/p&gt;

&lt;p&gt;First, we have the normal setup based on the examples but we split it into two files - &lt;code&gt;app.go&lt;/code&gt; will
be common to all variations and holds the Echo instance variable. We initialise it from a function
and because it is a &lt;code&gt;var&lt;/code&gt; this will happen &lt;em&gt;before&lt;/em&gt; any &lt;code&gt;init()&lt;/code&gt; functions run - a feature that we&amp;rsquo;ll
use to connect our handlers later.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;A separate source file contains the function to create the Echo instance and add the static
file handlers and middleware. Note the build tag on the first line which says to use this when &lt;em&gt;not&lt;/em&gt;
bulding with appengine or appenginevm tags (which thoese platforms automatically add for us). We also
have the &lt;code&gt;main()&lt;/code&gt; function to start serving our app as normal. This should all be very familiar.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-standalone.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-standalone.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;The handler-wireup that would normally also be a part of this Echo setup moves to separate files which
take advantage of the ability to have multiple &lt;code&gt;init()&lt;/code&gt; functions which run &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;e&lt;/code&gt; Echo var is
initialised but &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;main()&lt;/code&gt; function is executed. These allow additional handlers to attach
themselves to the instance - I&amp;rsquo;ve found the &lt;code&gt;Group&lt;/code&gt; feature naturally fits into this pattern with a file
per REST endpoint, often with a higher-level &lt;code&gt;api&lt;/code&gt; group created that they attach to instead of the root
Echo instance directly (so things like CORS middleware can be added at this higher common-level).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;users.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/users.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;If we run our app it should execute as it did before when everything was in one file although we have
at least gained the ability to organize our handlers a little more cleanly.&lt;/p&gt;

&lt;h3 id=&#34;appengine-classic-and-managed-vms&#34;&gt;AppEngine Classic and Managed VMs&lt;/h3&gt;

&lt;p&gt;So far we&amp;rsquo;ve seen how to split apart the Echo creation and setup but still have the same app that
still only runs standalone. Now we&amp;rsquo;ll see hwo those changes allow us to add support for AppEngine
hosting.&lt;/p&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;https://cloud.google.com/appengine/docs/go/&#34;&gt;AppEngine site&lt;/a&gt; for full configuration
and deployment information.&lt;/p&gt;

&lt;h4 id=&#34;app-yaml-configuration-file&#34;&gt;app.yaml configuration file&lt;/h4&gt;

&lt;p&gt;Both of these are Platform as as Service options running on either sandboxed micro-containers
or managed Compute Engine instances. Both require an &lt;code&gt;app.yaml&lt;/code&gt; file to describe the app to
the service. While the app &lt;em&gt;could&lt;/em&gt; still serve all it&amp;rsquo;s static files itself, one of the benefits
of the platform is having Google&amp;rsquo;s infrastructure handle that for us so it can be offloaded and
the app only has to deal with dynamic requests. The platform also handles logging and http gzip
compression so these can be removed from the codebase as well.&lt;/p&gt;

&lt;p&gt;The yaml file also contains other options to control instance size and auto-scaling so for true
deployment freedom you would likely have separate &lt;code&gt;app-classic.yaml&lt;/code&gt; and &lt;code&gt;app-vm.yaml&lt;/code&gt; files and
this can help when making the transition from AppEngine Classic to Managed VMs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-engine.yaml&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-engine.yaml&#34;&gt;
&lt;/pre&gt;


&lt;h4 id=&#34;router-configuration&#34;&gt;Router configuration&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ll now use the &lt;a href=&#34;http://golang.org/pkg/go/build/&#34;&gt;build constraints&lt;/a&gt; again like we did when creating
our &lt;code&gt;app-standalone.go&lt;/code&gt; instance but this time with the opposite tags to use this file &lt;em&gt;if&lt;/em&gt; the build has
the appengine or appenginevm tags (added automatically when deploying to these platforms).&lt;/p&gt;

&lt;p&gt;This allows us to replace the &lt;code&gt;createMux()&lt;/code&gt; function to create our Echo server &lt;em&gt;without&lt;/em&gt; any of the
static file handling and logging + gzip middleware which is no longer required. Also worth nothing is
that GAE classic provides a wrapper to handle serving the app so instead of a &lt;code&gt;main()&lt;/code&gt; function where
we run the server, we instead wire up the router to the default &lt;code&gt;http.Handler&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-engine.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-engine.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;Managed VMs are slightly different. They are expected to respond to requests on port 8080 as well
as special health-check requests used by the service to detect if an instance is still running in
order to provide automated failover and instance replacement. The &lt;code&gt;google.golang.org/appengine&lt;/code&gt;
package provides this for us so we have a slightly different version for Managed VMs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-managed.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-managed.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;So now we have three different configurations. We can build and run our app as normal so it can
be executed locally, on a full Compute Engine instance or any other traditional hosting provider
(including EC2, Docker etc&amp;hellip;). This build will ignore the code in appengine and appenginevm tagged
files and the &lt;code&gt;app.yaml&lt;/code&gt; file is meaningless to anything other than the AppEngine platform.&lt;/p&gt;

&lt;p&gt;We can also run locally using the &lt;a href=&#34;https://cloud.google.com/appengine/downloads&#34;&gt;Google AppEngine SDK for Go&lt;/a&gt;
either emulating &lt;a href=&#34;https://cloud.google.com/appengine/docs/go/tools/devserver&#34;&gt;AppEngine Classic&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &lt;a href=&#34;https://cloud.google.com/appengine/docs/managed-vms/sdk#run-local&#34;&gt;Managed VMs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud config set project [your project id]
gcloud preview app run .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course we can deploy our app to both of these platforms for easy and inexpensive auto-scaling joy.&lt;/p&gt;

&lt;p&gt;Depending on what your app actually does it&amp;rsquo;s possible you may need to make other changes to allow
switching between AppEngine provided service such as Datastore and alternative storage implementations
such as MongoDB. A combination of go interfaces and build constraints can make this fairly straightforward
but is outside the scope of this recipe.&lt;/p&gt;

&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CaptainCodeman&#34;&gt;CaptainCodeman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-7#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Graceful Shutdown</title>
      <link>http://echo.laily.net/recipes/graceful-shutdown</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/graceful-shutdown</guid>
      <description>

&lt;h2 id=&#34;graceful-shutdown-recipe&#34;&gt;Graceful Shutdown Recipe&lt;/h2&gt;

&lt;h3 id=&#34;using-grace-https-github-com-facebookgo-grace&#34;&gt;Using &lt;a href=&#34;https://github.com/facebookgo/grace&#34;&gt;grace&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/graceful-shutdown/grace/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;using-graceful-https-github-com-tylerb-graceful&#34;&gt;Using &lt;a href=&#34;https://github.com/tylerb/graceful&#34;&gt;graceful&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/graceful-shutdown/graceful/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mertenvg&#34;&gt;mertenvg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code&#34;&gt;Source Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/graceful-shutdown/graceful
&#34;&gt;graceful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/graceful-shutdown/grace
&#34;&gt;grace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HTTP2</title>
      <link>http://echo.laily.net/recipes/http2</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/http2</guid>
      <description>

&lt;h2 id=&#34;什么是-http2&#34;&gt;什么是 HTTP2?&lt;/h2&gt;

&lt;p&gt;HTTP/2 (原本的名字是 HTTP/2.0) 是万维网使用的 HTTP 网络协议的第二个主要版本。&lt;/p&gt;

&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用二进制格式传输数据，而不是文本。使得在解析和优化扩展上更为方便。&lt;/li&gt;
&lt;li&gt;多路复用，所有的请求都是通过一个 TCP 连接并发完成。&lt;/li&gt;
&lt;li&gt;对消息头采用 HPACK 进行压缩传输，能够节省消息头占用的网络的流量。&lt;/li&gt;
&lt;li&gt;Server Push：服务端能够更快的把资源推送给客户端。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;怎样运行-http2-和-https-服务&#34;&gt;怎样运行 HTTP2 和 HTTPS 服务?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;只用 &lt;code&gt;standard&lt;/code&gt; 引擎支持.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;生成一个自签名的-x-509-tls-证书-http-2-需要-tls-才能运行&#34;&gt;生成一个自签名的 X.509 TLS 证书(HTTP/2 需要 TLS 才能运行)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go run $GOROOT/src/crypto/tls/generate_cert.go --host localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的明亮会生一个&lt;code&gt;cert.pem&lt;/code&gt; 和&lt;code&gt;key.pem&lt;/code&gt; 文件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里只是展示使用，所以我们用了自签名的证书，正式环境建议去
&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E8%AE%A4%E8%AF%81%E6%9C%BA%E6%9E%84&#34;&gt;CA&lt;/a&gt;申请证书。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;配置引擎-engine-config&#34;&gt;配置引擎 &lt;code&gt;engine.Config&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/http2/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;最后&#34;&gt;最后&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://localhost:1323/request&#34;&gt;https://localhost:1323/request&lt;/a&gt; (显示 HTTP 请求信息)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://localhost:1323/stream&#34;&gt;https://localhost:1323/stream&lt;/a&gt; (实时展示当前时间)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;维护者&#34;&gt;维护者&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://echo.laily.net/recipes/hello-world</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/hello-world</guid>
      <description>

&lt;h2 id=&#34;hello-world-示例&#34;&gt;Hello World 示例&lt;/h2&gt;

&lt;h3 id=&#34;服务器&#34;&gt;服务器&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/hello-world/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;维护者&#34;&gt;维护者&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[源码](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSONP</title>
      <link>http://echo.laily.net/recipes/jsonp</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/jsonp</guid>
      <description>

&lt;h2 id=&#34;jsonp-recipe&#34;&gt;JSONP Recipe&lt;/h2&gt;

&lt;p&gt;JSONP is a method that allows cross-domain server calls. You can read more about it at the JSON versus JSONP Tutorial.&lt;/p&gt;

&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/jsonp/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/jsonp/public/index.html&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/willf&#34;&gt;willf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-3#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>http://echo.laily.net/recipes/jwt</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/jwt</guid>
      <description>

&lt;h2 id=&#34;jwt-recipe&#34;&gt;JWT Recipe&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JWT authentication using HS256 algorithm.&lt;/li&gt;
&lt;li&gt;JWT is retrieved from &lt;code&gt;Authorization&lt;/code&gt; request header.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/jwt/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;login&#34;&gt;Login&lt;/h4&gt;

&lt;p&gt;Login using username and password to retrieve a token.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X POST -d &#39;username=jon&#39; -d &#39;password=shhh!&#39; localhost:1323/login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;token&amp;quot;: &amp;quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NjE5NTcxMzZ9.RB3arc4-OyzASAaUhC2W3ReWaXAt_z2Fd3BN4aWTgEY&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;request&#34;&gt;Request&lt;/h4&gt;

&lt;p&gt;Request a restricted resource using the token in &lt;code&gt;Authorization&lt;/code&gt; request header.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl localhost:1323/restricted -H &amp;quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NjE5NTcxMzZ9.RB3arc4-OyzASAaUhC2W3ReWaXAt_z2Fd3BN4aWTgEY&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Welcome Jon Snow!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/axdg&#34;&gt;axdg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>http://echo.laily.net/recipes/middleware</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/middleware</guid>
      <description>

&lt;h2 id=&#34;middleware-recipe&#34;&gt;Middleware Recipe&lt;/h2&gt;

&lt;h3 id=&#34;how-to-write-a-custom-middleware&#34;&gt;How to write a custom middleware?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Middleware to collect request count, statuses and uptime.&lt;/li&gt;
&lt;li&gt;Middleware to write custom &lt;code&gt;Server&lt;/code&gt; header to the response.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;server&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/middleware/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h4 id=&#34;response&#34;&gt;Response&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Headers&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Content-Length:122
Content-Type:application/json; charset=utf-8
Date:Thu, 14 Apr 2016 20:31:46 GMT
Server:Echo/2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Body&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;uptime&amp;quot;: &amp;quot;2016-04-14T13:28:48.486548936-07:00&amp;quot;,
  &amp;quot;requestCount&amp;quot;: 5,
  &amp;quot;statuses&amp;quot;: {
    &amp;quot;200&amp;quot;: 4,
    &amp;quot;404&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Streaming Response</title>
      <link>http://echo.laily.net/recipes/streaming-response</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/streaming-response</guid>
      <description>

&lt;h2 id=&#34;streaming-response-recipe&#34;&gt;Streaming Response Recipe&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Send data as it is produced&lt;/li&gt;
&lt;li&gt;Streaming JSON response with chunked transfer encoding&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/streaming-response/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl localhost:1323
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;output&#34;&gt;Output&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;{&amp;quot;Altitude&amp;quot;:-97,&amp;quot;Latitude&amp;quot;:37.819929,&amp;quot;Longitude&amp;quot;:-122.478255}
{&amp;quot;Altitude&amp;quot;:1899,&amp;quot;Latitude&amp;quot;:39.096849,&amp;quot;Longitude&amp;quot;:-120.032351}
{&amp;quot;Altitude&amp;quot;:2619,&amp;quot;Latitude&amp;quot;:37.865101,&amp;quot;Longitude&amp;quot;:-119.538329}
{&amp;quot;Altitude&amp;quot;:42,&amp;quot;Latitude&amp;quot;:33.812092,&amp;quot;Longitude&amp;quot;:-117.918974}
{&amp;quot;Altitude&amp;quot;:15,&amp;quot;Latitude&amp;quot;:37.77493,&amp;quot;Longitude&amp;quot;:-122.419416}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Subdomains</title>
      <link>http://echo.laily.net/recipes/subdomains</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/subdomains</guid>
      <description>

&lt;h2 id=&#34;subdomains-recipe&#34;&gt;Subdomains Recipe&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/subdomains/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/axdg&#34;&gt;axdg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WebSocket</title>
      <link>http://echo.laily.net/recipes/websocket</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://echo.laily.net/recipes/websocket</guid>
      <description>

&lt;h2 id=&#34;websocket-recipe&#34;&gt;WebSocket Recipe&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Only supported in &lt;code&gt;standard&lt;/code&gt; engine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;using-net-websocket&#34;&gt;Using &lt;code&gt;net&lt;/code&gt; WebSocket&lt;/h3&gt;

&lt;h4 id=&#34;server&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/websocket/net/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;using-gorilla-websocket&#34;&gt;Using &lt;code&gt;gorilla&lt;/code&gt; WebSocket&lt;/h3&gt;

&lt;h4 id=&#34;server-1&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/websocket/gorilla/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/websocket/public/index.html&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;output&#34;&gt;Output&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Hello, Client!
Hello, Client!
Hello, Client!
Hello, Client!
Hello, Client!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Hello, Server!
Hello, Server!
Hello, Server!
Hello, Server!
Hello, Server!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-4#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>