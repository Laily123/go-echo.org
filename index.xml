<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go/Golang 框架 Echo 文档</title>
    <link>http://go-echo.org/</link>
    <description>Recent content on Go/Golang 框架 Echo 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://go-echo.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Basic Auth</title>
      <link>http://go-echo.org/middleware/basic-auth</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/middleware/basic-auth</guid>
      <description>

&lt;h2 id=&#34;basicauti-基本认证-中间件&#34;&gt;BasicAuti(基本认证) 中间件&lt;/h2&gt;

&lt;p&gt;BasicAuth 中间件提供了 HTTP 的基本认证方式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于有效的请求则继续执行后面的处理。&lt;/li&gt;
&lt;li&gt;对于无效的请求，返回&amp;rdquo;401 - Unauthorized&amp;rdquo;响应。&lt;/li&gt;
&lt;li&gt;对于请求头中&amp;rdquo;Authorization&amp;rdquo;无效或者为空的，返回&amp;rdquo;400 - Bad Request&amp;rdquo; 响应。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;用法&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.BasicAuth(func(username, password string) bool {
	if username == &amp;quot;joe&amp;quot; &amp;amp;&amp;amp; password == &amp;quot;secret&amp;quot; {
		return true
	}
	return false
}))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Body Limit</title>
      <link>http://go-echo.org/middleware/body-limit</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/middleware/body-limit</guid>
      <description>

&lt;h2 id=&#34;bodylimit-请求体限制-中间件&#34;&gt;BodyLimit(请求体限制) 中间件&lt;/h2&gt;

&lt;p&gt;BodyLimit 中间件用于设置允许的请求体的最大长度，如果请求的大小超过了该值，则返回&amp;rdquo;413 － Request Entity Too Large&amp;rdquo;响应。
这个限制的判断取决于请求头的&lt;code&gt;Content-Length&lt;/code&gt;和实际读取到的请求体内容两方面，是非常安全的。&lt;/p&gt;

&lt;p&gt;限制可以指定&lt;code&gt;4x&lt;/code&gt;或者&lt;code&gt;4xB&lt;/code&gt;，x是&amp;rdquo;K, M, G, T, P&amp;rdquo;中的一个。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;用法&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.BodyLimit(&amp;quot;2M&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CORS</title>
      <link>http://go-echo.org/recipes/cors</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/recipes/cors</guid>
      <description>

&lt;h2 id=&#34;cors-示例&#34;&gt;CORS 示例&lt;/h2&gt;

&lt;h3 id=&#34;服务端&#34;&gt;服务端&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/cors/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;中间件&#34;&gt;中间件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CORS(访问控制)</title>
      <link>http://go-echo.org/middleware/cors</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/middleware/cors</guid>
      <description>

&lt;h2 id=&#34;cors-访问控制-中间件&#34;&gt;CORS(访问控制) 中间件&lt;/h2&gt;

&lt;p&gt;CORS 中间件实现了 &lt;a href=&#34;http://www.w3.org/TR/cors&#34;&gt;CORS&lt;/a&gt; 的规格
CORS 提供给 web 服务器跨站的访问控制，使得跨站的数据传输更安全。&lt;/p&gt;

&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;CORSConfig struct {
  // AllowOrigin defines a list of origins that may access the resource.
  // Optional. Default value []string{&amp;quot;*&amp;quot;}.
  AllowOrigins []string

  // AllowMethods defines a list methods allowed when accessing the resource.
  // This is used in response to a preflight request.
  // Optional. Default value DefaultCORSConfig.AllowMethods.
  AllowMethods []string

  // AllowHeaders defines a list of request headers that can be used when
  // making the actual request. This in response to a preflight request.
  // Optional. Default value []string{}.
  AllowHeaders []string

  // AllowCredentials indicates whether or not the response to the request
  // can be exposed when the credentials flag is true. When used as part of
  // a response to a preflight request, this indicates whether or not the
  // actual request can be made using credentials.
  // Optional. Default value false.
  AllowCredentials bool

  // ExposeHeaders defines a whitelist headers that clients are allowed to
  // access.
  // Optional. Default value []string{}.
  ExposeHeaders []string

  // MaxAge indicates how long (in seconds) the results of a preflight request
  // can be cached.
  // Optional. Default value 0.
  MaxAge int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;默认配置&#34;&gt;默认配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultCORSConfig = CORSConfig{
	AllowOrigins: []string{&amp;quot;*&amp;quot;},
	AllowMethods: []string{echo.GET, echo.HEAD, echo.PUT, echo.PATCH, echo.POST, echo.DELETE},
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.CORS())&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;自定义配置&#34;&gt;自定义配置&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
  AllowOrigins: []string{&amp;quot;https://labstack.com&amp;quot;, &amp;quot;https://labstack.net&amp;quot;},
  AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},
}))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CRUD</title>
      <link>http://go-echo.org/recipes/crud</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/recipes/crud</guid>
      <description>

&lt;h2 id=&#34;crud-示例&#34;&gt;CRUD 示例&lt;/h2&gt;

&lt;h3 id=&#34;服务端&#34;&gt;服务端&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/crud/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;客户端&#34;&gt;客户端&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;创建-user&#34;&gt;创建 User&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X POST \
  -H &#39;Content-Type: application/json&#39; \
  -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;Joe Smith&amp;quot;}&#39; \
  localhost:1323/users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;name&amp;quot;: &amp;quot;Joe Smith&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;获取-user&#34;&gt;获取 User&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl localhost:1323/users/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;name&amp;quot;: &amp;quot;Joe Smith&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;更新-user&#34;&gt;更新 User&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X PUT \
  -H &#39;Content-Type: application/json&#39; \
  -d &#39;{&amp;quot;name&amp;quot;:&amp;quot;Joe&amp;quot;}&#39; \
  localhost:1323/users/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;name&amp;quot;: &amp;quot;Joe&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;删除-user&#34;&gt;删除 User&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X DELETE localhost:1323/users/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Response&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NoContent - 204&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;维护者&#34;&gt;维护者&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSRF(跨站请求伪造)</title>
      <link>http://go-echo.org/middleware/ecsrf</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/middleware/ecsrf</guid>
      <description>

&lt;h2 id=&#34;csrf-middleware-跨站请求伪造&#34;&gt;CSRF Middleware(跨站请求伪造)&lt;/h2&gt;

&lt;p&gt;CSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。 跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。&lt;/p&gt;

&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;CSRFConfig struct {
  // Key to create CSRF token.
  Secret []byte `json:&amp;quot;secret&amp;quot;`

  // TokenLookup is a string in the form of &amp;quot;&amp;lt;source&amp;gt;:&amp;lt;key&amp;gt;&amp;quot; that is used
  // to extract token from the request.
  // Optional. Default value &amp;quot;header:X-CSRF-Token&amp;quot;.
  // Possible values:
  // - &amp;quot;header:&amp;lt;name&amp;gt;&amp;quot;
  // - &amp;quot;form:&amp;lt;name&amp;gt;&amp;quot;
  // - &amp;quot;header:&amp;lt;name&amp;gt;&amp;quot;
  TokenLookup string `json:&amp;quot;token_lookup&amp;quot;`

  // Context key to store generated CSRF token into context.
  // Optional. Default value &amp;quot;csrf&amp;quot;.
  ContextKey string `json:&amp;quot;context_key&amp;quot;`

  // Name of the CSRF cookie. This cookie will store CSRF token.
  // Optional. Default value &amp;quot;csrf&amp;quot;.
  CookieName string `json:&amp;quot;cookie_name&amp;quot;`

  // Domain of the CSRF cookie.
  // Optional. Default value none.
  CookieDomain string `json:&amp;quot;cookie_domain&amp;quot;`

  // Path of the CSRF cookie.
  // Optional. Default value none.
  CookiePath string `json:&amp;quot;cookie_path&amp;quot;`

  // Expiration time of the CSRF cookie.
  // Optional. Default value 24H.
  CookieExpires time.Time `json:&amp;quot;cookie_expires&amp;quot;`

  // Indicates if CSRF cookie is secure.
  CookieSecure bool `json:&amp;quot;cookie_secure&amp;quot;`
  // Optional. Default value false.

  // Indicates if CSRF cookie is HTTP only.
  // Optional. Default value false.
  CookieHTTPOnly bool `json:&amp;quot;cookie_http_only&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;默认配置&#34;&gt;默认配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultCSRFConfig = CSRFConfig{
  TokenLookup:   &amp;quot;header:&amp;quot; + echo.HeaderXCSRFToken,
  ContextKey:    &amp;quot;csrf&amp;quot;,
  CookieName:    &amp;quot;csrf&amp;quot;,
  CookieExpires: time.Now().Add(24 * time.Hour),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.CSRF(&amp;quot;secret&amp;quot;))&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;自定义配置&#34;&gt;自定义配置&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{
  TokenLookup: &amp;quot;header:X-XSRF-TOKEN&amp;quot;,
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example above uses &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; request header to extract CSRF token.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Context</title>
      <link>http://go-echo.org/guide/context</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/guide/context</guid>
      <description>

&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;

&lt;p&gt;echo.Context 代表了当前 HTTP 请求的context（上下文？这里看个人理解吧，就不翻译了）。
它含有请求和相应的引用，路径，路径参数，数据，注册的业务处理方法和 读取请求和输出响应的API。
Context 100% 和标准的 context.Context 兼容。
由于 Context 是一个借口，所以也可以很方便的使用自定义的 API 扩展。&lt;/p&gt;

&lt;h3 id=&#34;扩展-context&#34;&gt;扩展 Context&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;自定义一个 context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    type CustomContext struct {
	echo.Context
    }

    func (c *CustomContext) Foo() {
        println(&amp;quot;foo&amp;quot;)
    }

    func (c *CustomContext) Bar() {
        println(&amp;quot;bar&amp;quot;)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;创建一个中间件来扩展默认的 context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    e.Use(func(h echo.HandlerFunc) echo.HandlerFunc {
        return func(c echo.Context) error {
            cc := &amp;amp;CustomContext{c}
            return h(cc)
        }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;这个中间件要在所有其它中间件之前注册到路由上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;在业务处理中使用&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Get(&amp;quot;/&amp;quot;, func(c echo.Context) error {
	cc := c.(*CustomContext)
	cc.Foo()
	cc.Bar()
	return cc.String(200, &amp;quot;OK&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;标准的-context&#34;&gt;标准的 Context&lt;/h3&gt;

&lt;p&gt;echo.Context 内嵌了标准的 context.Context 接口，所以 context.Context 的所有方法 echo.Context 都可以使用。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;示例&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.GET(&amp;quot;/users/:name&amp;quot;, func(c echo.Context) error) {
    c.SetContext(context.WithValue(nil, &amp;quot;key&amp;quot;, &amp;quot;val&amp;quot;))
    // Pass it down...
    // Use it...
    val := c.Value(&amp;quot;key&amp;quot;).(string)
    return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cookies</title>
      <link>http://go-echo.org/guide/cookies</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/guide/cookies</guid>
      <description>

&lt;h2 id=&#34;cookies&#34;&gt;Cookies&lt;/h2&gt;

&lt;p&gt;Cookie 是用户在访问网站时服务器发送过来存储在浏览器上的一小段数据。每次用户访问网页，浏览器都把 Cookies 发送回服务器以提醒服务器这个用户以前干过什么。
Cookie 用来提供一个可靠的途径让服务器记住一些状态信息（比如在线商城中添加物品到购物车）或者记录用户的浏览器行为（比如点击了某个按钮，登录，哪个页面被访问过）。
Cookie 也可以用来存储用户输入过的表单内容像电话号码，地址等等。&lt;/p&gt;

&lt;h3 id=&#34;cookie-属性&#34;&gt;Cookie 属性&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;可选&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Domain&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Expires&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Secure&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;HTTPOnly&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;创建一个-cookie&#34;&gt;创建一个 Cookie&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func writeCookie(c echo.Context) error {
	cookie := new(echo.Cookie)
	cookie.SetName(&amp;quot;username&amp;quot;)
	cookie.SetValue(&amp;quot;jon&amp;quot;)
	cookie.SetExpires(time.Now().Add(24 * time.Hour))
	c.SetCookie(cookie)
	return c.String(http.StatusOK, &amp;quot;write a cookie&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;new(echo.Cookie)&lt;/code&gt; 创建Cookie。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;Setter&lt;/code&gt; 方法设置 cookie 的属性。&lt;/li&gt;
&lt;li&gt;最后，使用 &lt;code&gt;c.SetCookie(cookies)&lt;/code&gt; 来给响应添加 &lt;code&gt;Set-Cookie&lt;/code&gt; 头。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;读取-cookie&#34;&gt;读取 Cookie&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func readCookie(c echo.Context) error {
	cookie, err := c.Cookie(&amp;quot;username&amp;quot;)
	if err != nil {
		return err
	}
	fmt.Println(cookie.Name())
	fmt.Println(cookie.Value())
	return c.String(http.StatusOK, &amp;quot;read a cookie&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Cookie 通过名称从 HTTP 请求里读取 &lt;code&gt;c.Cookie(&amp;quot;name&amp;quot;)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Cookie 的属性使用&lt;code&gt;Getter&lt;/code&gt; 方法获取。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;读取所有-cookies&#34;&gt;读取所有 Cookies&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func readAllCookies(c echo.Context) error {
	for _, cookie := range c.Cookies() {
		fmt.Println(cookie.Name())
		fmt.Println(cookie.Value())
	}
	return c.String(http.StatusOK, &amp;quot;read all cookie&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Embed Resources</title>
      <link>http://go-echo.org/recipes/embed-resources</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/recipes/embed-resources</guid>
      <description>

&lt;h2 id=&#34;embed-resources-recipe&#34;&gt;Embed Resources Recipe&lt;/h2&gt;

&lt;h3 id=&#34;with-go-rice&#34;&gt;With go.rice&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/embed-resources/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/caarlos0&#34;&gt;caarlos0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/maddie&#34;&gt;maddie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>File Upload</title>
      <link>http://go-echo.org/recipes/file-upload</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/recipes/file-upload</guid>
      <description>

&lt;h2 id=&#34;file-upload-recipe&#34;&gt;File Upload Recipe&lt;/h2&gt;

&lt;h3 id=&#34;how-to-upload-single-file-with-fields&#34;&gt;How to upload single file with fields?&lt;/h3&gt;

&lt;h4 id=&#34;server&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/single/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h4 id=&#34;client&#34;&gt;Client&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/single/public/index.html&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;how-to-upload-multiple-files-with-fields&#34;&gt;How to upload multiple files with fields?&lt;/h3&gt;

&lt;h4 id=&#34;server-1&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/multiple/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h4 id=&#34;client-1&#34;&gt;Client&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/multiple/public/index.html&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code&#34;&gt;Source Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/file-upload/single
&#34;&gt;single&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/file-upload/multiple
&#34;&gt;multiple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Google App Engine</title>
      <link>http://go-echo.org/recipes/google-app-engine</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/recipes/google-app-engine</guid>
      <description>

&lt;h2 id=&#34;google-app-engine-recipe&#34;&gt;Google App Engine Recipe&lt;/h2&gt;

&lt;p&gt;Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic)
through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo
works great with all of these but requires a few changes to the usual examples to run on the
AppEngine Classic and Managed VM options. With a small amount of effort though it&amp;rsquo;s possible
to produce a codebase that will run on these and also non-managed platforms automatically.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll walk through the changes needed to support each option.&lt;/p&gt;

&lt;h3 id=&#34;standalone&#34;&gt;Standalone&lt;/h3&gt;

&lt;p&gt;Wait? What? I thought this was about AppEngine! Bear with me - the easiest way to show the changes
required is to start with a setup for standalone and work from there plus there&amp;rsquo;s no reason we
wouldn&amp;rsquo;t want to retain the ability to run our app anywhere, right?&lt;/p&gt;

&lt;p&gt;We take advantage of the go &lt;a href=&#34;http://golang.org/pkg/go/build/&#34;&gt;build constraints or tags&lt;/a&gt; to change
how we create and run the Echo server for each platform while keeping the rest of the application
(e.g. handler wireup) the same across all of them.&lt;/p&gt;

&lt;p&gt;First, we have the normal setup based on the examples but we split it into two files - &lt;code&gt;app.go&lt;/code&gt; will
be common to all variations and holds the Echo instance variable. We initialise it from a function
and because it is a &lt;code&gt;var&lt;/code&gt; this will happen &lt;em&gt;before&lt;/em&gt; any &lt;code&gt;init()&lt;/code&gt; functions run - a feature that we&amp;rsquo;ll
use to connect our handlers later.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;A separate source file contains the function to create the Echo instance and add the static
file handlers and middleware. Note the build tag on the first line which says to use this when &lt;em&gt;not&lt;/em&gt;
bulding with appengine or appenginevm tags (which thoese platforms automatically add for us). We also
have the &lt;code&gt;main()&lt;/code&gt; function to start serving our app as normal. This should all be very familiar.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-standalone.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-standalone.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;The handler-wireup that would normally also be a part of this Echo setup moves to separate files which
take advantage of the ability to have multiple &lt;code&gt;init()&lt;/code&gt; functions which run &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;e&lt;/code&gt; Echo var is
initialised but &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;main()&lt;/code&gt; function is executed. These allow additional handlers to attach
themselves to the instance - I&amp;rsquo;ve found the &lt;code&gt;Group&lt;/code&gt; feature naturally fits into this pattern with a file
per REST endpoint, often with a higher-level &lt;code&gt;api&lt;/code&gt; group created that they attach to instead of the root
Echo instance directly (so things like CORS middleware can be added at this higher common-level).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;users.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/users.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;If we run our app it should execute as it did before when everything was in one file although we have
at least gained the ability to organize our handlers a little more cleanly.&lt;/p&gt;

&lt;h3 id=&#34;appengine-classic-and-managed-vms&#34;&gt;AppEngine Classic and Managed VMs&lt;/h3&gt;

&lt;p&gt;So far we&amp;rsquo;ve seen how to split apart the Echo creation and setup but still have the same app that
still only runs standalone. Now we&amp;rsquo;ll see hwo those changes allow us to add support for AppEngine
hosting.&lt;/p&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;https://cloud.google.com/appengine/docs/go/&#34;&gt;AppEngine site&lt;/a&gt; for full configuration
and deployment information.&lt;/p&gt;

&lt;h4 id=&#34;app-yaml-configuration-file&#34;&gt;app.yaml configuration file&lt;/h4&gt;

&lt;p&gt;Both of these are Platform as as Service options running on either sandboxed micro-containers
or managed Compute Engine instances. Both require an &lt;code&gt;app.yaml&lt;/code&gt; file to describe the app to
the service. While the app &lt;em&gt;could&lt;/em&gt; still serve all it&amp;rsquo;s static files itself, one of the benefits
of the platform is having Google&amp;rsquo;s infrastructure handle that for us so it can be offloaded and
the app only has to deal with dynamic requests. The platform also handles logging and http gzip
compression so these can be removed from the codebase as well.&lt;/p&gt;

&lt;p&gt;The yaml file also contains other options to control instance size and auto-scaling so for true
deployment freedom you would likely have separate &lt;code&gt;app-classic.yaml&lt;/code&gt; and &lt;code&gt;app-vm.yaml&lt;/code&gt; files and
this can help when making the transition from AppEngine Classic to Managed VMs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-engine.yaml&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-engine.yaml&#34;&gt;
&lt;/pre&gt;


&lt;h4 id=&#34;router-configuration&#34;&gt;Router configuration&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ll now use the &lt;a href=&#34;http://golang.org/pkg/go/build/&#34;&gt;build constraints&lt;/a&gt; again like we did when creating
our &lt;code&gt;app-standalone.go&lt;/code&gt; instance but this time with the opposite tags to use this file &lt;em&gt;if&lt;/em&gt; the build has
the appengine or appenginevm tags (added automatically when deploying to these platforms).&lt;/p&gt;

&lt;p&gt;This allows us to replace the &lt;code&gt;createMux()&lt;/code&gt; function to create our Echo server &lt;em&gt;without&lt;/em&gt; any of the
static file handling and logging + gzip middleware which is no longer required. Also worth nothing is
that GAE classic provides a wrapper to handle serving the app so instead of a &lt;code&gt;main()&lt;/code&gt; function where
we run the server, we instead wire up the router to the default &lt;code&gt;http.Handler&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-engine.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-engine.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;Managed VMs are slightly different. They are expected to respond to requests on port 8080 as well
as special health-check requests used by the service to detect if an instance is still running in
order to provide automated failover and instance replacement. The &lt;code&gt;google.golang.org/appengine&lt;/code&gt;
package provides this for us so we have a slightly different version for Managed VMs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-managed.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-managed.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;So now we have three different configurations. We can build and run our app as normal so it can
be executed locally, on a full Compute Engine instance or any other traditional hosting provider
(including EC2, Docker etc&amp;hellip;). This build will ignore the code in appengine and appenginevm tagged
files and the &lt;code&gt;app.yaml&lt;/code&gt; file is meaningless to anything other than the AppEngine platform.&lt;/p&gt;

&lt;p&gt;We can also run locally using the &lt;a href=&#34;https://cloud.google.com/appengine/downloads&#34;&gt;Google AppEngine SDK for Go&lt;/a&gt;
either emulating &lt;a href=&#34;https://cloud.google.com/appengine/docs/go/tools/devserver&#34;&gt;AppEngine Classic&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &lt;a href=&#34;https://cloud.google.com/appengine/docs/managed-vms/sdk#run-local&#34;&gt;Managed VMs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud config set project [your project id]
gcloud preview app run .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course we can deploy our app to both of these platforms for easy and inexpensive auto-scaling joy.&lt;/p&gt;

&lt;p&gt;Depending on what your app actually does it&amp;rsquo;s possible you may need to make other changes to allow
switching between AppEngine provided service such as Datastore and alternative storage implementations
such as MongoDB. A combination of go interfaces and build constraints can make this fairly straightforward
but is outside the scope of this recipe.&lt;/p&gt;

&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CaptainCodeman&#34;&gt;CaptainCodeman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-7#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Graceful Shutdown</title>
      <link>http://go-echo.org/recipes/graceful-shutdown</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/recipes/graceful-shutdown</guid>
      <description>

&lt;h2 id=&#34;graceful-shutdown-recipe&#34;&gt;Graceful Shutdown Recipe&lt;/h2&gt;

&lt;h3 id=&#34;using-grace-https-github-com-facebookgo-grace&#34;&gt;Using &lt;a href=&#34;https://github.com/facebookgo/grace&#34;&gt;grace&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/graceful-shutdown/grace/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;using-graceful-https-github-com-tylerb-graceful&#34;&gt;Using &lt;a href=&#34;https://github.com/tylerb/graceful&#34;&gt;graceful&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/graceful-shutdown/graceful/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mertenvg&#34;&gt;mertenvg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code&#34;&gt;Source Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/graceful-shutdown/graceful
&#34;&gt;graceful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/graceful-shutdown/grace
&#34;&gt;grace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gzip</title>
      <link>http://go-echo.org/middleware/gzip</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/middleware/gzip</guid>
      <description>

&lt;h2 id=&#34;gzip-middleware&#34;&gt;Gzip Middleware&lt;/h2&gt;

&lt;p&gt;Gzip 中间件使用 gzip 压缩方案来对HTTP响应进行压缩。&lt;/p&gt;

&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;GzipConfig struct {
  // Gzip compression level.
  // Optional. Default value -1.
  Level int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;默认配置&#34;&gt;默认配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultGzipConfig = GzipConfig{
  Level: -1,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.Gzip())&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;自定义配置&#34;&gt;自定义配置&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.GzipWithConfig(middleware.GzipConfig{
  Level: 5
}))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HTTP 请求</title>
      <link>http://go-echo.org/guide/request</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/guide/request</guid>
      <description>

&lt;h2 id=&#34;http-请求&#34;&gt;HTTP 请求&lt;/h2&gt;

&lt;h3 id=&#34;action-路径处理&#34;&gt;Action 路径处理&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Context#Path()&lt;/code&gt; 返回在路由注册的Action的路径，它可以被中间件使用来得到访问的目的地址。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;例如&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Use(func(c echo.Context) error {
    println(c.Path()) // 输出 `/users/:name`
    return nil
})
e.GET(&amp;quot;/users/:name&amp;quot;, func(c echo.Context) error) {
    return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;golang-org-x-net-context-对象&#34;&gt;golang.org/x/net/context 对象&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;echo.Context&lt;/code&gt; 内嵌了 &lt;code&gt;context.Context&lt;/code&gt; 接口，所以&lt;code&gt;context.Context&lt;/code&gt; 的所有方法&lt;code&gt;echo.Context&lt;/code&gt;都支持。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;例如&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.GET(&amp;quot;/users/:name&amp;quot;, func(c echo.Context) error) {
    c.SetNetContext(context.WithValue(nil, &amp;quot;key&amp;quot;, &amp;quot;val&amp;quot;))
    // 向后传递...
    // 使用它...
    val := c.Value(&amp;quot;key&amp;quot;).(string)
    return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;url-参数&#34;&gt;URL 参数&lt;/h3&gt;

&lt;p&gt;URL 参数可以用参数名 &lt;code&gt;Context#Param(name string) string&lt;/code&gt; 和参数索引(序号) &lt;code&gt;Context#P(i int) string&lt;/code&gt; 取得。通过参数索引的方式性能会稍微好一点。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;例如&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.GET(&amp;quot;/users/:name&amp;quot;, func(c echo.Context) error {
	// 通过名称
	name := c.Param(&amp;quot;name&amp;quot;)

	// 通过索引值
	name := c.P(0)

	return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl http://localhost:1323/users/joe
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;请求参数&#34;&gt;请求参数&lt;/h3&gt;

&lt;p&gt;请求参数可以通过参数名获取 &lt;code&gt;Context#QueryParam(name string)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;例如&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.GET(&amp;quot;/users&amp;quot;, func(c echo.Context) error {
	name := c.QueryParam(&amp;quot;name&amp;quot;)
	return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -G -d &amp;quot;name=joe&amp;quot; http://localhost:1323/users
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;表单参数&#34;&gt;表单参数&lt;/h3&gt;

&lt;p&gt;表单参数可以使用参数名获取 &lt;code&gt;Context#FormValue(name string)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;例如&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.POST(&amp;quot;/users&amp;quot;, func(c echo.Context) error {
	name := c.FormValue(&amp;quot;name&amp;quot;)
	return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -d &amp;quot;name=joe&amp;quot; http://localhost:1323/users
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HTTP2</title>
      <link>http://go-echo.org/recipes/http2</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://go-echo.org/recipes/http2</guid>
      <description>

&lt;h2 id=&#34;什么是-http2&#34;&gt;什么是 HTTP2?&lt;/h2&gt;

&lt;p&gt;HTTP/2 (原本的名字是 HTTP/2.0) 是万维网使用的 HTTP 网络协议的第二个主要版本。&lt;/p&gt;

&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用二进制格式传输数据，而不是文本。使得在解析和优化扩展上更为方便。&lt;/li&gt;
&lt;li&gt;多路复用，所有的请求都是通过一个 TCP 连接并发完成。&lt;/li&gt;
&lt;li&gt;对消息头采用 HPACK 进行压缩传输，能够节省消息头占用的网络的流量。&lt;/li&gt;
&lt;li&gt;Server Push：服务端能够更快的把资源推送给客户端。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;怎样运行-http2-和-https-服务&#34;&gt;怎样运行 HTTP2 和 HTTPS 服务?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;只用 &lt;code&gt;standard&lt;/code&gt; 引擎支持.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;生成一个自签名的-x-509-tls-证书-http-2-需要-tls-才能运行&#34;&gt;生成一个自签名的 X.509 TLS 证书(HTTP/2 需要 TLS 才能运行)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go run $GOROOT/src/crypto/tls/generate_cert.go --host localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的明亮会生一个&lt;code&gt;cert.pem&lt;/code&gt; 和&lt;code&gt;key.pem&lt;/code&gt; 文件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里只是展示使用，所以我们用了自签名的证书，正式环境建议去
&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E8%AE%A4%E8%AF%81%E6%9C%BA%E6%9E%84&#34;&gt;CA&lt;/a&gt;申请证书。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;配置引擎-engine-config&#34;&gt;配置引擎 &lt;code&gt;engine.Config&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/http2/server.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;最后&#34;&gt;最后&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://localhost:1323/request&#34;&gt;https://localhost:1323/request&lt;/a&gt; (显示 HTTP 请求信息)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://localhost:1323/stream&#34;&gt;https://localhost:1323/stream&lt;/a&gt; (实时展示当前时间)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;维护者&#34;&gt;维护者&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-2#&#34;&gt;[Source Code](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>